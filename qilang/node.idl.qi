package qilang

enum NodeType
  const NodeType_Package         = 1
  const NodeType_Import          = 2

  const NodeType_BinOpExpr       = 3
  const NodeType_UOpExpr         = 4
  const NodeType_VarExpr         = 5

  const NodeType_SimpleTypeExpr  = 6
  const NodeType_MapTypeExpr     = 7
  const NodeType_ListTypeExpr    = 8
  const NodeType_TupleTypeExpr   = 9

  const NodeType_BoolData        = 10
  const NodeType_IntData         = 11
  const NodeType_FloatData       = 12
  const NodeType_StringData      = 13
  const NodeType_MapData         = 14
  const NodeType_ListData        = 15
  const NodeType_TupleData       = 16

  const NodeType_ObjectDef       = 17
  const NodeType_PropDef         = 18
  const NodeType_VarDef          = 19
  const NodeType_At              = 20

  const NodeType_InterfaceDecl   = 21
  const NodeType_FnDecl          = 22
  const NodeType_EmitDecl        = 23
  const NodeType_PropDecl        = 24

  const NodeType_StructDecl      = 25
  const NodeType_ConstDecl       = 26
end

enum UnaryOpCode
  const UnaryOpCode_Negate = 0
  const UnaryOpCode_Minus  = 1
end

enum BinaryOpCode
  const BinaryOpCode_BoolOr   = 0
  const BinaryOpCode_BoolAnd  = 1

  const BinaryOpCode_And      = 2
  const BinaryOpCode_Or       = 3
  const BinaryOpCode_Xor      = 4

  const BinaryOpCode_EqEq     = 5
  const BinaryOpCode_Ne       = 6
  const BinaryOpCode_Gt       = 7
  const BinaryOpCode_Lt       = 8
  const BinaryOpCode_Ge       = 9
  const BinaryOpCode_Le       = 10

  const BinaryOpCode_Plus     = 11
  const BinaryOpCode_Minus    = 12
  const BinaryOpCode_Divide   = 13
  const BinaryOpCode_Multiply = 14
  const BinaryOpCode_Modulus  = 15

  const BinaryOpCode_FetchArray = 16 # a[b]
end

struct NodeData
  ntype    NodeType
  attrs    [str]any
  children []NodeData
end

interface Node(NodeData)
  fn type() NodeType

  fn setAttr(str, any)
  fn addChild(Node)

  fn attr(str) any
  fn children() []Node
end
fn newNode(type NodeType) Node

########################
# DATA
########################
interface DataNode(Node)
end
fn newDataNode(type NodeType) DataNode

interface IntDataNode(DataNode)
  fn value() int64
end
fn newIntDataNode(data int64) DataNode

interface UIntDataNode(DataNode)
  fn value() uint64
end
fn newUIntDataNode(data uint64) DataNode

interface FloatDataNode(Node)
  fn value() float64
end
fn newFloatDataNode(data float64) DataNode

interface StringDataNode(DataNode)
  fn value() str
end
fn newStringDataNode(data uint64) DataNode

interface ListDataNode(DataNode)
  fn value() []DataNode
end
fn newListDataNode(data []DataNode) DataNode

interface MapDataNode(DataNode)
  fn value() [](DataNode, DataNode)
end
fn newMapDataNode(data [](DataNode,DataNode)) DataNode

interface TupleDataNode(DataNode)
  fn value() []DataNode
end
fn newTupleDataNode(data []DataNode) DataNode

interface TypeExprNode(Node)
  fn name() str
end

interface DefNode(Node)
end

interface ObjectDefNode
  fn name() str
  fn type() TypeExprNode
  fn defs() []DefNode
end
