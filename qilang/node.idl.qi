package qilang

enum NodeType
  NodeType_Package         = 1
  NodeType_Import          = 2

  NodeType_BinOpExpr       = 3
  NodeType_UOpExpr         = 4
  NodeType_VarExpr         = 5

  NodeType_SimpleTypeExpr  = 6
  NodeType_MapTypeExpr     = 7
  NodeType_ListTypeExpr    = 8
  NodeType_TupleTypeExpr   = 9

  NodeType_BoolData        = 10
  NodeType_IntData         = 11
  NodeType_FloatData       = 12
  NodeType_StringData      = 13
  NodeType_MapData         = 14
  NodeType_ListData        = 15
  NodeType_TupleData       = 16

  NodeType_ObjectDef       = 17
  NodeType_PropDef         = 18
  NodeType_VarDef          = 19
  NodeType_At              = 20

  NodeType_InterfaceDecl   = 21
  NodeType_FnDecl          = 22
  NodeType_EmitDecl        = 23
  NodeType_PropDecl        = 24

  NodeType_StructDecl      = 25
  NodeType_ConstDecl       = 26
end

enum UnaryOpCode
  UnaryOpCode_Negate = 0
  UnaryOpCode_Minus  = 1
end

enum BinaryOpCode
  BinaryOpCode_BoolOr   = 0
  BinaryOpCode_BoolAnd  = 1

  BinaryOpCode_And      = 2
  BinaryOpCode_Or       = 3
  BinaryOpCode_Xor      = 4

  BinaryOpCode_EqEq     = 5
  BinaryOpCode_Ne       = 6
  BinaryOpCode_Gt       = 7
  BinaryOpCode_Lt       = 8
  BinaryOpCode_Ge       = 9
  BinaryOpCode_Le       = 10

  BinaryOpCode_Plus     = 11
  BinaryOpCode_Minus    = 12
  BinaryOpCode_Divide   = 13
  BinaryOpCode_Multiply = 14
  BinaryOpCode_Modulus  = 15

  BinaryOpCode_FetchArray // a[b]
end

struct NodeData
  ntype    NodeType
  attrs    [str]any
  children []NodeData
end

interface Node(NodeData)
  fn type() NodeType

  fn setAttr(str, any)
  fn addChild(Node)

  fn attr(str) any
  fn children() []Node
end
fn newNode(NodeType type) Node

########################
# DATA
########################
interface DataNode(Node)
end
fn newDataNode(NodeType type) DataNode;

interface IntDataNode(DataNode)
  fn value() int64
end
fn newIntDataNode(data int64) DataNode

interface UIntDataNode(DataNode)
  fn value() uint64
end
fn newUIntDataNode(data uint64) DataNode

interface FloatDataNode(Node)
  fn value() float64
end
fn newFloatDataNode(data float64) DataNode

interface StringDataNode(DataNode)
  fn value() str
end
fn newStringDataNode(data uint64) DataNode

interface ListDataNode(DataNode)
  fn value() []DataNode
end
fn newListDataNode(data []DataNode) DataNode

interface MapDataNode(DataNode)
  fn value() [](DataNode, DataNode)
end
fn newMapDataNode(data [](DataNode,DataNode)) DataNode

interface TupleDataNode(DataNode)
  fn value() []DataNode
end
fn newTupleDataNode(data []DataNode) DataNode

interface TypeNode(Node)
  fn name() str
end

interface DefNode(Node)
end

interface ObjectDefNode
  fn name() str
  fn type() TypeExprNode
  fn defs() []DefNode
end
